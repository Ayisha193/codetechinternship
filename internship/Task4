# from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
# from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
# from cryptography.hazmat.primitives import hashes
# from cryptography.hazmat.backends import default_backend
import os
import base64

# Generate key from password
def derive_key(password: str, salt: bytes):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

# Encrypt data using AES
def encrypt_data(password: str, plaintext: str):
    salt = os.urandom(16)
    key = derive_key(password, salt)
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    
    padded_text = plaintext + ' ' * (16 - len(plaintext) % 16)  # Padding
    ciphertext = encryptor.update(padded_text.encode()) + encryptor.finalize()
    
    return base64.b64encode(salt + iv + ciphertext).decode()

# Decrypt data using AES
def decrypt_data(password: str, encrypted_text: str):
    encrypted_bytes = base64.b64decode(encrypted_text)
    salt, iv, ciphertext = encrypted_bytes[:16], encrypted_bytes[16:32], encrypted_bytes[32:]
    key = derive_key(password, salt)
    
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_text = decryptor.update(ciphertext) + decryptor.finalize()
    
    return decrypted_text.decode().strip()

if __name__ == "__main__":
    choice = input("Enter 'e' to encrypt or 'd' to decrypt: ").strip().lower()
    password = input("Enter password: ").strip()
    
    if choice == 'e':
        plaintext = input("Enter text to encrypt: ").strip()
        encrypted_text = encrypt_data(password, plaintext)
        print("Encrypted:", encrypted_text)
    elif choice == 'd':
        encrypted_text = input("Enter text to decrypt: ").strip()
        try:
            decrypted_text = decrypt_data(password, encrypted_text)
            print("Decrypted:", decrypted_text)
        except Exception:
            print("Decryption failed. Incorrect password or corrupted data.")